const chai = require('chai');
const chaiIterator = require('chai-iterator');
chai.use(chaiIterator);
const {
  expect
} = chai;
chai.should();
const sinon = require('sinon');

const oaStruct = require('./oa_struct.js');
require('./md_array.js');

const MDArray = oaStruct.get('mdArray');
const _ = oaStruct.get("_");

describe('md_array.js', function() {

describe('MDArray', function() {
  describe('MakeRectangular', function() {
    it('test 1', function() {
      let size = [5, 3];
      let mdArray = MDArray.MakeRectangular(size);
      expect(mdArray).to.deep.equal([
        _.times(5, () => null),
        _.times(5, () => null),
        _.times(5, () => null)
      ]);
    });
    it('test 2', function() {
      let size = [5, 3];
      let mdArray = MDArray.MakeRectangular(size, {leaf(l, ind,[i, j]) {
        return i * 5 + j;
      }});
      expect(mdArray).to.deep.equal([
        _.times(5, i => i),
        _.times(5, i => i + 5),
        _.times(5, i => i + 10)
      ]);
    });
    it('test 3', function() {
      let size = [5, 3];
      let mdArray = MDArray.MakeRectangular(size, {leaf(l, ind,[i, j]) {
        return i * 5 + j;
      }, internal(o, l, i, is) {
        Object.assign(o, {
          i,
          indices: is
        });
      }});
      expect(mdArray).to.deep.equal([
        _.times(5, i => i),
        _.times(5, i => i + 5),
        _.times(5, i => i + 10)
      ]);
      for(let i = 0; i < 3; i++) {
        expect(mdArray[i]).to.have.property('i', i);
        expect(mdArray[i]).to.have.property('indices');
        expect(mdArray[i].indices).to.deep.equal([i]);
      }
    });
  });
  describe('IterateRectangular', function() {
    it('test 1', function() {
      let mdArray = [
        _.times(5, i => i),
        _.times(5, i => i + 5),
        _.times(5, i => i + 10)
      ];
      let size = [5, 3];
      let callback = sinon.stub().returns(false), ctx = {};
      MDArray.IterateRectangular(mdArray, {size}, callback, ctx);
      expect(callback.callCount).to.equal(3 * 5);
      let calls = callback.getCalls();
      calls.forEach((call, i) => {
        let r = Math.floor(i / 5);
        let c = i % 5;
        expect(call.thisValue).to.equals(ctx);
        expect(call.args[0]).to.equals(i);
        expect(call.args[1]).to.deep.equals([r, c]);
      });
    });
    it('test 2', function() {
      let mdArray = [
        _.times(5, i => i),
        _.times(5, i => i + 5),
        _.times(5, i => i + 10)
      ];
      let size = [5, 3];
      let callback = sinon.stub().returns(true), ctx = {};
      MDArray.IterateRectangular(mdArray, {size}, callback, ctx);
      expect(callback.callCount).to.equal(1);
      let call = callback.firstCall;
      let i = 0;
      let r = 0;
      let c = 0;
      expect(call.thisValue).to.equals(ctx);
      expect(call.args[0]).to.equals(i);
      expect(call.args[1]).to.deep.equals([r, c]);
    });
  });
  describe('RectangularIterator', function() {
    it('test 1', function() {
      let mdArray = [
        _.times(5, i => i),
        _.times(5, i => i + 5),
        _.times(5, i => i + 10)
      ];
      let size = [5, 3];
      MDArray.RectangularIterator(mdArray, {size}).should.deep.iterate.over(
        _.times(3 * 5, i => i)
      );
    });
  });
  describe('ForEachRectangular', function() {
    it('test 1', function() {
      let mdArray = [
        _.times(5, i => i),
        _.times(5, i => i + 5),
        _.times(5, i => i + 10)
      ];
      let size = [5, 3];
      let callback = sinon.spy(), ctx = {};
      MDArray.ForEachRectangular(mdArray, {size}, callback, ctx);
      expect(callback.callCount).to.equal(3 * 5);
      let calls = callback.getCalls();
      calls.forEach((call, i) => {
        let r = Math.floor(i / 5);
        let c = i % 5;
        expect(call.thisValue).to.equals(ctx);
        expect(call.args[0]).to.equals(i);
        expect(call.args[1]).to.deep.equals([r, c]);
      });
    });
  });
  describe('ReduceRectangular', function() {
    it('test 1', function() {
      let mdArray = [
        _.times(5, i => i),
        _.times(5, i => i + 5),
        _.times(5, i => i + 10)
      ];
      let size = [5, 3];
      let callback = sinon.fake((a, b) => a + b), ctx = {};
      expect(MDArray.ReduceRectangular(mdArray, {size}, callback, ctx, 0)).to.equal(15 * 14 / 2);
      expect(callback.callCount).to.equal(3 * 5);
      let calls = callback.getCalls();
      calls.forEach((call, i) => {
        let r = Math.floor(i / 5);
        let c = i % 5;
        expect(call.thisValue).to.equals(ctx);
        expect(call.args[0]).to.equals(i * (i - 1) / 2);
        expect(call.args[1]).to.equals(i);
        expect(call.args[2]).to.deep.equals([r, c]);
      });
    });
  });
  describe('SomeRectangular', function() {
    it('test 1', function() {
      let mdArray = [
        _.times(5, i => i),
        _.times(5, i => i + 5),
        _.times(5, i => i + 10)
      ];
      let size = [5, 3];
      let callback = sinon.fake(v => v < 7), ctx = {};
      expect(MDArray.SomeRectangular(mdArray, {size}, callback, ctx)).to.be.true;
      expect(callback.callCount).to.equal(1);
      let calls = callback.getCalls();
      calls.forEach((call, i) => {
        let r = Math.floor(i / 5);
        let c = i % 5;
        expect(call.thisValue).to.equals(ctx);
        expect(call.args[0]).to.equals(i);
        expect(call.args[1]).to.deep.equals([r, c]);
      });
    });
    it('test 2', function() {
      let mdArray = [
        _.times(5, i => i),
        _.times(5, i => i + 5),
        _.times(5, i => i + 10)
      ];
      let size = [5, 3];
      let callback = sinon.fake(v => v >= 7), ctx = {};
      expect(MDArray.SomeRectangular(mdArray, {size}, callback, ctx)).to.be.true;
      expect(callback.callCount).to.equal(8);
      let calls = callback.getCalls();
      calls.forEach((call, i) => {
        let r = Math.floor(i / 5);
        let c = i % 5;
        expect(call.thisValue).to.equals(ctx);
        expect(call.args[0]).to.equals(i);
        expect(call.args[1]).to.deep.equals([r, c]);
      });
    });
    it('test 3', function() {
      let mdArray = [
        _.times(5, i => i),
        _.times(5, i => i + 5),
        _.times(5, i => i + 10)
      ];
      let size = [5, 3];
      let callback = sinon.fake(v => v >= 20), ctx = {};
      expect(MDArray.SomeRectangular(mdArray, {size}, callback, ctx)).to.be.false;
      expect(callback.callCount).to.equal(3 * 5);
      let calls = callback.getCalls();
      calls.forEach((call, i) => {
        let r = Math.floor(i / 5);
        let c = i % 5;
        expect(call.thisValue).to.equals(ctx);
        expect(call.args[0]).to.equals(i);
        expect(call.args[1]).to.deep.equals([r, c]);
      });
    });
  });
  describe('EveryRectangular', function() {
    it('test 1', function() {
      let mdArray = [
        _.times(5, i => i),
        _.times(5, i => i + 5),
        _.times(5, i => i + 10)
      ];
      let size = [5, 3];
      let callback = sinon.fake(v => v >= 7), ctx = {};
      expect(MDArray.EveryRectangular(mdArray, {size}, callback, ctx)).to.be.false;
      expect(callback.callCount).to.equal(1);
      let calls = callback.getCalls();
      calls.forEach((call, i) => {
        let r = Math.floor(i / 5);
        let c = i % 5;
        expect(call.thisValue).to.equals(ctx);
        expect(call.args[0]).to.equals(i);
        expect(call.args[1]).to.deep.equals([r, c]);
      });
    });
    it('test 2', function() {
      let mdArray = [
        _.times(5, i => i),
        _.times(5, i => i + 5),
        _.times(5, i => i + 10)
      ];
      let size = [5, 3];
      let callback = sinon.fake(v => v < 7), ctx = {};
      expect(MDArray.EveryRectangular(mdArray, {size}, callback, ctx)).to.be.false;
      expect(callback.callCount).to.equal(8);
      let calls = callback.getCalls();
      calls.forEach((call, i) => {
        let r = Math.floor(i / 5);
        let c = i % 5;
        expect(call.thisValue).to.equals(ctx);
        expect(call.args[0]).to.equals(i);
        expect(call.args[1]).to.deep.equals([r, c]);
      });
    });
    it('test 3', function() {
      let mdArray = [
        _.times(5, i => i),
        _.times(5, i => i + 5),
        _.times(5, i => i + 10)
      ];
      let size = [5, 3];
      let callback = sinon.fake(v => v < 20), ctx = {};
      expect(MDArray.EveryRectangular(mdArray, {size}, callback, ctx)).to.be.true;
      expect(callback.callCount).to.equal(3 * 5);
      let calls = callback.getCalls();
      calls.forEach((call, i) => {
        let r = Math.floor(i / 5);
        let c = i % 5;
        expect(call.thisValue).to.equals(ctx);
        expect(call.args[0]).to.equals(i);
        expect(call.args[1]).to.deep.equals([r, c]);
      });
    });
  });
});

});