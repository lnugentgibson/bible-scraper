const oaStruct = require('./oa_struct.js');

/* web-start */

function HeapGen(_, jsMath, math) {
  function pushHeap(heap, el, comp) {
    let c = heap.length, p = Math.floor((c + 1) / 2) - 1;
    heap.push(el);
    while(p >= 0 && comp(heap[c], heap[p])) {
      let t = heap[c];
      heap[c] = heap[p];
      heap[p] = t;
      c = p;
      p = Math.floor((c + 1) / 2) - 1;
    }
  }
  function popHeap(heap, comp) {
    let o = heap[0];
    heap[0] = heap[heap.length - 1];
    heap.pop();
    let p = 0, c = 1;
    while(c < heap.length) {
      if(c + 1 < heap.length && comp(heap[c + 1], heap[c])) c++;
      if(comp(heap[c], heap[p])) {
        let t = heap[c];
        heap[c] = heap[p];
        heap[p] = t;
        p = c;
        c = 2 * (p + 1) - 1;
        continue;
      }
      break;
    }
    return o;
  }
  
  const Heap = {};
  
  Object.defineProperties(Heap, {
    pushHeap: { get: () => pushHeap },
    popHeap: { get: () => popHeap },
  });
  
  return Heap;
}
oaStruct.RegisterObject('heap', HeapGen, [], [
  {name: 'pushHeap', function: []},
  {name: 'popHeap', function: []},
]);

/* web-end */