const chai = require('chai');
const chaiIterator = require('chai-iterator');
chai.use(chaiIterator);
const {
  expect
} = chai;
chai.should();
const sinon = require('sinon');
const _ = require('lodash');

const oaStruct = require('./oa_struct.js');
oaStruct.Register('_', () => _, []);
require('./trie.js');

describe('trie.js', function() {

describe('TrieNode', function() {
  var TrieNode;
  beforeEach(function() {
    TrieNode = oaStruct.get('trieNode');
  });
  it('is not null', function() {
    expect(TrieNode).to.not.be.null;
  });
  it('size unique', function() {
    const tree = {
      unique: true
    };
    let node = {
      tree,
      val: 9,
      children: {
        a: {
          tree,
          children: {
            l: {
              tree,
              children: {
                p: {
                  tree,
                  children: {
                    h: {
                      tree,
                      children: {
                        a: {
                          tree,
                          val: 5,
                          children: {
                            b: {
                              tree,
                              children: {
                                e: {
                                  tree,
                                  children: {
                                    t: {
                                      tree,
                                      val: 3,
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  children: {
                    p: {
                      tree,
                      children: {
                        h: {
                          tree,
                          val: 8,
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    expect(TrieNode.size(node)).to.equal(4);
  });
  it('get unique', function() {
    const tree = {
      unique: true
    };
    const node = {
      tree,
      val: 9,
      children: {
        a: {
          tree,
          children: {
            l: {
              tree,
              children: {
                p: {
                  tree,
                  children: {
                    h: {
                      tree,
                      children: {
                        a: {
                          tree,
                          val: 5,
                          children: {
                            b: {
                              tree,
                              children: {
                                e: {
                                  tree,
                                  children: {
                                    t: {
                                      tree,
                                      val: 3,
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  children: {
                    p: {
                      tree,
                      children: {
                        h: {
                          tree,
                          val: 8,
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    expect(TrieNode.at(node, '')).to.equal(9);
    expect(TrieNode.at(node, 'alpha')).to.equal(5);
    expect(TrieNode.at(node, 'alphabet')).to.equal(3);
    expect(TrieNode.at(node, 'aleph')).to.equal(8);
    expect(TrieNode.at(node, 'beta')).to.equal(undefined);
    expect(TrieNode.at(node, 'alphas')).to.equal(undefined);
    expect(TrieNode.at(node, 'abra')).to.equal(undefined);
  });
  it('iterators unique', function() {
    const tree = {
      unique: true
    };
    const node = {
      tree,
      val: 9,
      children: {
        a: {
          tree,
          children: {
            l: {
              tree,
              children: {
                p: {
                  tree,
                  children: {
                    h: {
                      tree,
                      children: {
                        a: {
                          tree,
                          val: 5,
                          children: {
                            b: {
                              tree,
                              children: {
                                e: {
                                  tree,
                                  children: {
                                    t: {
                                      tree,
                                      val: 3,
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  children: {
                    p: {
                      tree,
                      children: {
                        h: {
                          tree,
                          val: 8,
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    TrieNode.inOrderGenerator(node).should.deep.iterate.over([
      {key: '', val: 9},
      {key: 'aleph', val: 8},
      {key: 'alpha', val: 5},
      {key: 'alphabet', val: 3}
    ]);
  });
  it('add unique empty string', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      children: {
        a: {
          tree,
          children: {
            l: {
              tree,
              children: {
                p: {
                  tree,
                  children: {
                    h: {
                      tree,
                      children: {
                        a: {
                          tree,
                          val: 5,
                          children: {
                            b: {
                              tree,
                              children: {
                                e: {
                                  tree,
                                  children: {
                                    t: {
                                      tree,
                                      val: 3,
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  children: {
                    p: {
                      tree,
                      children: {
                        h: {
                          tree,
                          val: 8,
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }, key = '', val = 7, expected = {
      tree,
      val: 7,
      children: {
        a: {
          tree,
          children: {
            l: {
              tree,
              children: {
                p: {
                  tree,
                  children: {
                    h: {
                      tree,
                      children: {
                        a: {
                          tree,
                          val: 5,
                          children: {
                            b: {
                              tree,
                              children: {
                                e: {
                                  tree,
                                  children: {
                                    t: {
                                      tree,
                                      val: 3,
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  children: {
                    p: {
                      tree,
                      children: {
                        h: {
                          tree,
                          val: 8,
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    expect(TrieNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('add unique empty string already exists', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      val: 9,
      children: {
        a: {
          tree,
          children: {
            l: {
              tree,
              children: {
                p: {
                  tree,
                  children: {
                    h: {
                      tree,
                      children: {
                        a: {
                          tree,
                          val: 5,
                          children: {
                            b: {
                              tree,
                              children: {
                                e: {
                                  tree,
                                  children: {
                                    t: {
                                      tree,
                                      val: 3,
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  children: {
                    p: {
                      tree,
                      children: {
                        h: {
                          tree,
                          val: 8,
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }, key = '', val = 7, expected = {
      tree,
      val: 9,
      children: {
        a: {
          tree,
          children: {
            l: {
              tree,
              children: {
                p: {
                  tree,
                  children: {
                    h: {
                      tree,
                      children: {
                        a: {
                          tree,
                          val: 5,
                          children: {
                            b: {
                              tree,
                              children: {
                                e: {
                                  tree,
                                  children: {
                                    t: {
                                      tree,
                                      val: 3,
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  children: {
                    p: {
                      tree,
                      children: {
                        h: {
                          tree,
                          val: 8,
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    expect(TrieNode.add(node, key, val)).to.be.false;
    expect(node).to.deep.equal(expected);
  });
  it('add unique at node', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      val: 9,
      children: {
        a: {
          tree,
          children: {
            l: {
              tree,
              children: {
                p: {
                  tree,
                  children: {
                    h: {
                      tree,
                      children: {
                        a: {
                          tree,
                          val: 5,
                          children: {
                            b: {
                              tree,
                              children: {
                                e: {
                                  tree,
                                  children: {
                                    t: {
                                      tree,
                                      val: 3,
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  children: {
                    p: {
                      tree,
                      children: {
                        h: {
                          tree,
                          val: 8,
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }, key = 'al', val = 7, expected = {
      tree,
      val: 9,
      children: {
        a: {
          tree,
          children: {
            l: {
              tree,
              val: 7,
              children: {
                p: {
                  tree,
                  children: {
                    h: {
                      tree,
                      children: {
                        a: {
                          tree,
                          val: 5,
                          children: {
                            b: {
                              tree,
                              children: {
                                e: {
                                  tree,
                                  children: {
                                    t: {
                                      tree,
                                      val: 3,
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  children: {
                    p: {
                      tree,
                      children: {
                        h: {
                          tree,
                          val: 8,
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    expect(TrieNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('add unique at node already exists', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      val: 9,
      children: {
        a: {
          tree,
          children: {
            l: {
              tree,
              val: 11,
              children: {
                p: {
                  tree,
                  children: {
                    h: {
                      tree,
                      children: {
                        a: {
                          tree,
                          val: 5,
                          children: {
                            b: {
                              tree,
                              children: {
                                e: {
                                  tree,
                                  children: {
                                    t: {
                                      tree,
                                      val: 3,
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  children: {
                    p: {
                      tree,
                      children: {
                        h: {
                          tree,
                          val: 8,
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }, key = 'al', val = 7, expected = {
      tree,
      val: 9,
      children: {
        a: {
          tree,
          children: {
            l: {
              tree,
              val: 11,
              children: {
                p: {
                  tree,
                  children: {
                    h: {
                      tree,
                      children: {
                        a: {
                          tree,
                          val: 5,
                          children: {
                            b: {
                              tree,
                              children: {
                                e: {
                                  tree,
                                  children: {
                                    t: {
                                      tree,
                                      val: 3,
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  children: {
                    p: {
                      tree,
                      children: {
                        h: {
                          tree,
                          val: 8,
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    expect(TrieNode.add(node, key, val)).to.be.false;
    expect(node).to.deep.equal(expected);
  });
  it('add unique branch node', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      val: 9,
      children: {
        a: {
          tree,
          children: {
            l: {
              tree,
              children: {
                p: {
                  tree,
                  children: {
                    h: {
                      tree,
                      children: {
                        a: {
                          tree,
                          val: 5,
                          children: {
                            b: {
                              tree,
                              children: {
                                e: {
                                  tree,
                                  children: {
                                    t: {
                                      tree,
                                      val: 3,
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  children: {
                    p: {
                      tree,
                      children: {
                        h: {
                          tree,
                          val: 8,
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }, key = 'altar', val = 7, expected = {
      tree,
      val: 9,
      children: {
        a: {
          tree,
          children: {
            l: {
              tree,
              children: {
                p: {
                  tree,
                  children: {
                    h: {
                      tree,
                      children: {
                        a: {
                          tree,
                          val: 5,
                          children: {
                            b: {
                              tree,
                              children: {
                                e: {
                                  tree,
                                  children: {
                                    t: {
                                      tree,
                                      val: 3,
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  children: {
                    p: {
                      tree,
                      children: {
                        h: {
                          tree,
                          val: 8,
                          children: {}
                        }
                      }
                    }
                  }
                },
                t: {
                  tree,
                  children: {
                    a: {
                      tree,
                      children: {
                        r: {
                          tree,
                          val: 7,
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    expect(TrieNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('add unique branch path', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      val: 9,
      children: {
        a: {
          tree,
          children: {
            l: {
              tree,
              children: {
                p: {
                  tree,
                  children: {
                    h: {
                      tree,
                      children: {
                        a: {
                          tree,
                          val: 5,
                          children: {
                            b: {
                              tree,
                              children: {
                                e: {
                                  tree,
                                  children: {
                                    t: {
                                      tree,
                                      val: 3,
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  children: {
                    p: {
                      tree,
                      children: {
                        h: {
                          tree,
                          val: 8,
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }, key = 'alpine', val = 7, expected = {
      tree,
      val: 9,
      children: {
        a: {
          tree,
          children: {
            l: {
              tree,
              children: {
                p: {
                  tree,
                  children: {
                    h: {
                      tree,
                      children: {
                        a: {
                          tree,
                          val: 5,
                          children: {
                            b: {
                              tree,
                              children: {
                                e: {
                                  tree,
                                  children: {
                                    t: {
                                      tree,
                                      val: 3,
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    i: {
                      tree,
                      children: {
                        n: {
                          tree,
                          children: {
                            e: {
                              tree,
                              val: 7,
                              children: {}
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  children: {
                    p: {
                      tree,
                      children: {
                        h: {
                          tree,
                          val: 8,
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    expect(TrieNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('add unique extend path', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      val: 9,
      children: {
        a: {
          tree,
          children: {
            l: {
              tree,
              children: {
                p: {
                  tree,
                  children: {
                    h: {
                      tree,
                      children: {
                        a: {
                          tree,
                          val: 5,
                          children: {
                            b: {
                              tree,
                              children: {
                                e: {
                                  tree,
                                  children: {
                                    t: {
                                      tree,
                                      val: 3,
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  children: {
                    p: {
                      tree,
                      children: {
                        h: {
                          tree,
                          val: 8,
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }, key = 'alephs', val = 7, expected = {
      tree,
      val: 9,
      children: {
        a: {
          tree,
          children: {
            l: {
              tree,
              children: {
                p: {
                  tree,
                  children: {
                    h: {
                      tree,
                      children: {
                        a: {
                          tree,
                          val: 5,
                          children: {
                            b: {
                              tree,
                              children: {
                                e: {
                                  tree,
                                  children: {
                                    t: {
                                      tree,
                                      val: 3,
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  children: {
                    p: {
                      tree,
                      children: {
                        h: {
                          tree,
                          val: 8,
                          children: {
                            s: {
                              tree,
                              val: 7,
                              children: {}
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    expect(TrieNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('add nonunique empty string', function() {
    const tree = {
      unique: false
    }, node = {
      tree,
      vals: [],
      children: {
        a: {
          tree,
          vals: [],
          children: {
            l: {
              tree,
              vals: [],
              children: {
                p: {
                  tree,
                  vals: [],
                  children: {
                    h: {
                      tree,
                      vals: [],
                      children: {
                        a: {
                          tree,
                          vals: [5],
                          children: {
                            b: {
                              tree,
                              vals: [],
                              children: {
                                e: {
                                  tree,
                                  vals: [],
                                  children: {
                                    t: {
                                      tree,
                                      vals: [3],
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  vals: [],
                  children: {
                    p: {
                      tree,
                      vals: [],
                      children: {
                        h: {
                          tree,
                          vals: [8],
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }, key = '', val = 7, expected = {
      tree,
      vals: [7],
      children: {
        a: {
          tree,
          vals: [],
          children: {
            l: {
              tree,
              vals: [],
              children: {
                p: {
                  tree,
                  vals: [],
                  children: {
                    h: {
                      tree,
                      vals: [],
                      children: {
                        a: {
                          tree,
                          vals: [5],
                          children: {
                            b: {
                              tree,
                              vals: [],
                              children: {
                                e: {
                                  tree,
                                  vals: [],
                                  children: {
                                    t: {
                                      tree,
                                      vals: [3],
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  vals: [],
                  children: {
                    p: {
                      tree,
                      vals: [],
                      children: {
                        h: {
                          tree,
                          vals: [8],
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    expect(TrieNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('add nonunique empty string already exists', function() {
    const tree = {
      unique: false
    }, node = {
      tree,
      vals: [9, 2],
      children: {
        a: {
          tree,
          vals: [],
          children: {
            l: {
              tree,
              vals: [],
              children: {
                p: {
                  tree,
                  vals: [],
                  children: {
                    h: {
                      tree,
                      vals: [],
                      children: {
                        a: {
                          tree,
                          vals: [5],
                          children: {
                            b: {
                              tree,
                              vals: [],
                              children: {
                                e: {
                                  tree,
                                  vals: [],
                                  children: {
                                    t: {
                                      tree,
                                      vals: [3],
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  vals: [],
                  children: {
                    p: {
                      tree,
                      vals: [],
                      children: {
                        h: {
                          tree,
                          vals: [8],
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }, key = '', val = 7, expected = {
      tree,
      vals: [9, 2, 7],
      children: {
        a: {
          tree,
          vals: [],
          children: {
            l: {
              tree,
              vals: [],
              children: {
                p: {
                  tree,
                  vals: [],
                  children: {
                    h: {
                      tree,
                      vals: [],
                      children: {
                        a: {
                          tree,
                          vals: [5],
                          children: {
                            b: {
                              tree,
                              vals: [],
                              children: {
                                e: {
                                  tree,
                                  vals: [],
                                  children: {
                                    t: {
                                      tree,
                                      vals: [3],
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  vals: [],
                  children: {
                    p: {
                      tree,
                      vals: [],
                      children: {
                        h: {
                          tree,
                          vals: [8],
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    expect(TrieNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('add nonunique at node', function() {
    const tree = {
      unique: false
    }, node = {
      tree,
      vals: [9, 2],
      children: {
        a: {
          tree,
          vals: [],
          children: {
            l: {
              tree,
              vals: [],
              children: {
                p: {
                  tree,
                  vals: [],
                  children: {
                    h: {
                      tree,
                      vals: [],
                      children: {
                        a: {
                          tree,
                          vals: [5],
                          children: {
                            b: {
                              tree,
                              vals: [],
                              children: {
                                e: {
                                  tree,
                                  vals: [],
                                  children: {
                                    t: {
                                      tree,
                                      vals: [3],
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  vals: [],
                  children: {
                    p: {
                      tree,
                      vals: [],
                      children: {
                        h: {
                          tree,
                          vals: [8],
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }, key = 'al', val = 7, expected = {
      tree,
      vals: [9, 2],
      children: {
        a: {
          tree,
          vals: [],
          children: {
            l: {
              tree,
              vals: [7],
              children: {
                p: {
                  tree,
                  vals: [],
                  children: {
                    h: {
                      tree,
                      vals: [],
                      children: {
                        a: {
                          tree,
                          vals: [5],
                          children: {
                            b: {
                              tree,
                              vals: [],
                              children: {
                                e: {
                                  tree,
                                  vals: [],
                                  children: {
                                    t: {
                                      tree,
                                      vals: [3],
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  vals: [],
                  children: {
                    p: {
                      tree,
                      vals: [],
                      children: {
                        h: {
                          tree,
                          vals: [8],
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    expect(TrieNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('add nonunique at node already exists', function() {
    const tree = {
      unique: false
    }, node = {
      tree,
      vals: [9, 2],
      children: {
        a: {
          tree,
          vals: [],
          children: {
            l: {
              tree,
              vals: [11],
              children: {
                p: {
                  tree,
                  vals: [],
                  children: {
                    h: {
                      tree,
                      vals: [],
                      children: {
                        a: {
                          tree,
                          vals: [5],
                          children: {
                            b: {
                              tree,
                              vals: [],
                              children: {
                                e: {
                                  tree,
                                  vals: [],
                                  children: {
                                    t: {
                                      tree,
                                      vals: [3],
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  vals: [],
                  children: {
                    p: {
                      tree,
                      vals: [],
                      children: {
                        h: {
                          tree,
                          vals: [8],
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }, key = 'al', val = 7, expected = {
      tree,
      vals: [9, 2],
      children: {
        a: {
          tree,
          vals: [],
          children: {
            l: {
              tree,
              vals: [11, 7],
              children: {
                p: {
                  tree,
                  vals: [],
                  children: {
                    h: {
                      tree,
                      vals: [],
                      children: {
                        a: {
                          tree,
                          vals: [5],
                          children: {
                            b: {
                              tree,
                              vals: [],
                              children: {
                                e: {
                                  tree,
                                  vals: [],
                                  children: {
                                    t: {
                                      tree,
                                      vals: [3],
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  vals: [],
                  children: {
                    p: {
                      tree,
                      vals: [],
                      children: {
                        h: {
                          tree,
                          vals: [8],
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    expect(TrieNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('add nonunique branch node', function() {
    const tree = {
      unique: false
    }, node = {
      tree,
      vals: [9, 2],
      children: {
        a: {
          tree,
          vals: [],
          children: {
            l: {
              tree,
              vals: [],
              children: {
                p: {
                  tree,
                  vals: [],
                  children: {
                    h: {
                      tree,
                      vals: [],
                      children: {
                        a: {
                          tree,
                          vals: [5],
                          children: {
                            b: {
                              tree,
                              vals: [],
                              children: {
                                e: {
                                  tree,
                                  vals: [],
                                  children: {
                                    t: {
                                      tree,
                                      vals: [3],
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  vals: [],
                  children: {
                    p: {
                      tree,
                      vals: [],
                      children: {
                        h: {
                          tree,
                          vals: [8],
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }, key = 'altar', val = 7, expected = {
      tree,
      vals: [9, 2],
      children: {
        a: {
          tree,
          vals: [],
          children: {
            l: {
              tree,
              vals: [],
              children: {
                p: {
                  tree,
                  vals: [],
                  children: {
                    h: {
                      tree,
                      vals: [],
                      children: {
                        a: {
                          tree,
                          vals: [5],
                          children: {
                            b: {
                              tree,
                              vals: [],
                              children: {
                                e: {
                                  tree,
                                  vals: [],
                                  children: {
                                    t: {
                                      tree,
                                      vals: [3],
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  vals: [],
                  children: {
                    p: {
                      tree,
                      vals: [],
                      children: {
                        h: {
                          tree,
                          vals: [8],
                          children: {}
                        }
                      }
                    }
                  }
                },
                t: {
                  tree,
                  vals: [],
                  children: {
                    a: {
                      tree,
                      vals: [],
                      children: {
                        r: {
                          tree,
                          vals: [7],
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    expect(TrieNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('add nonunique branch path', function() {
    const tree = {
      unique: false
    }, node = {
      tree,
      vals: [9, 2],
      children: {
        a: {
          tree,
          vals: [],
          children: {
            l: {
              tree,
              vals: [],
              children: {
                p: {
                  tree,
                  vals: [],
                  children: {
                    h: {
                      tree,
                      vals: [],
                      children: {
                        a: {
                          tree,
                          vals: [5],
                          children: {
                            b: {
                              tree,
                              vals: [],
                              children: {
                                e: {
                                  tree,
                                  vals: [],
                                  children: {
                                    t: {
                                      tree,
                                      vals: [3],
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  vals: [],
                  children: {
                    p: {
                      tree,
                      vals: [],
                      children: {
                        h: {
                          tree,
                          vals: [8],
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }, key = 'alpine', val = 7, expected = {
      tree,
      vals: [9, 2],
      children: {
        a: {
          tree,
          vals: [],
          children: {
            l: {
              tree,
              vals: [],
              children: {
                p: {
                  tree,
                  vals: [],
                  children: {
                    h: {
                      tree,
                      vals: [],
                      children: {
                        a: {
                          tree,
                          vals: [5],
                          children: {
                            b: {
                              tree,
                              vals: [],
                              children: {
                                e: {
                                  tree,
                                  vals: [],
                                  children: {
                                    t: {
                                      tree,
                                      vals: [3],
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    i: {
                      tree,
                      vals: [],
                      children: {
                        n: {
                          tree,
                          vals: [],
                          children: {
                            e: {
                              tree,
                              vals: [7],
                              children: {}
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  vals: [],
                  children: {
                    p: {
                      tree,
                      vals: [],
                      children: {
                        h: {
                          tree,
                          vals: [8],
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    expect(TrieNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('add nonunique extend path', function() {
    const tree = {
      unique: false
    }, node = {
      tree,
      vals: [9, 2],
      children: {
        a: {
          tree,
          vals: [],
          children: {
            l: {
              tree,
              vals: [],
              children: {
                p: {
                  tree,
                  vals: [],
                  children: {
                    h: {
                      tree,
                      vals: [],
                      children: {
                        a: {
                          tree,
                          vals: [5],
                          children: {
                            b: {
                              tree,
                              vals: [],
                              children: {
                                e: {
                                  tree,
                                  vals: [],
                                  children: {
                                    t: {
                                      tree,
                                      vals: [3],
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  vals: [],
                  children: {
                    p: {
                      tree,
                      vals: [],
                      children: {
                        h: {
                          tree,
                          vals: [8],
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }, key = 'alephs', val = 7, expected = {
      tree,
      vals: [9, 2],
      children: {
        a: {
          tree,
          vals: [],
          children: {
            l: {
              tree,
              vals: [],
              children: {
                p: {
                  tree,
                  vals: [],
                  children: {
                    h: {
                      tree,
                      vals: [],
                      children: {
                        a: {
                          tree,
                          vals: [5],
                          children: {
                            b: {
                              tree,
                              vals: [],
                              children: {
                                e: {
                                  tree,
                                  vals: [],
                                  children: {
                                    t: {
                                      tree,
                                      vals: [3],
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  vals: [],
                  children: {
                    p: {
                      tree,
                      vals: [],
                      children: {
                        h: {
                          tree,
                          vals: [8],
                          children: {
                            s: {
                              tree,
                              vals: [7],
                              children: {}
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    expect(TrieNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  if(false)
  it('add unique', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      val: 9,
      children: {
        a: {
          tree,
          children: {
            l: {
              tree,
              children: {
                p: {
                  tree,
                  children: {
                    h: {
                      tree,
                      children: {
                        a: {
                          tree,
                          val: 5,
                          children: {
                            b: {
                              tree,
                              children: {
                                e: {
                                  tree,
                                  children: {
                                    t: {
                                      tree,
                                      val: 3,
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  children: {
                    p: {
                      tree,
                      children: {
                        h: {
                          tree,
                          val: 8,
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }, key = '', val = 7, expected = {
      tree,
      val: 9,
      children: {
        a: {
          tree,
          children: {
            l: {
              tree,
              children: {
                p: {
                  tree,
                  children: {
                    h: {
                      tree,
                      children: {
                        a: {
                          tree,
                          val: 5,
                          children: {
                            b: {
                              tree,
                              children: {
                                e: {
                                  tree,
                                  children: {
                                    t: {
                                      tree,
                                      val: 3,
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  children: {
                    p: {
                      tree,
                      children: {
                        h: {
                          tree,
                          val: 8,
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    expect(TrieNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  if(false)
  it('add nonunique', function() {
      const tree = {
        unique: false
      }, node = {
        tree,
        vals: [9, 2],
        children: {
          a: {
            tree,
            vals: [],
            children: {
              l: {
                tree,
                vals: [],
                children: {
                  p: {
                    tree,
                    vals: [],
                    children: {
                      h: {
                        tree,
                        vals: [],
                        children: {
                          a: {
                            tree,
                            vals: [5],
                            children: {
                              b: {
                                tree,
                                vals: [],
                                children: {
                                  e: {
                                    tree,
                                    vals: [],
                                    children: {
                                      t: {
                                        tree,
                                        vals: [3],
                                        children: {}
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  e: {
                    tree,
                    vals: [],
                    children: {
                      p: {
                        tree,
                        vals: [],
                        children: {
                          h: {
                            tree,
                            vals: [8],
                            children: {}
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }, key = '', val = 7, expected = {
        tree,
        vals: [9, 2],
        children: {
          a: {
            tree,
            vals: [],
            children: {
              l: {
                tree,
                vals: [],
                children: {
                  p: {
                    tree,
                    vals: [],
                    children: {
                      h: {
                        tree,
                        vals: [],
                        children: {
                          a: {
                            tree,
                            vals: [5],
                            children: {
                              b: {
                                tree,
                                vals: [],
                                children: {
                                  e: {
                                    tree,
                                    vals: [],
                                    children: {
                                      t: {
                                        tree,
                                        vals: [3],
                                        children: {}
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  e: {
                    tree,
                    vals: [],
                    children: {
                      p: {
                        tree,
                        vals: [],
                        children: {
                          h: {
                            tree,
                            vals: [8],
                            children: {}
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      expect(TrieNode.add(node, key, val)).to.be.true;
      expect(node).to.deep.equal(expected);
    });
  it('remove unique empty string', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      val: 9,
      children: {
        a: {
          tree,
          children: {
            l: {
              tree,
              children: {
                p: {
                  tree,
                  children: {
                    h: {
                      tree,
                      children: {
                        a: {
                          tree,
                          val: 5,
                          children: {
                            b: {
                              tree,
                              children: {
                                e: {
                                  tree,
                                  children: {
                                    t: {
                                      tree,
                                      val: 3,
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  children: {
                    p: {
                      tree,
                      children: {
                        h: {
                          tree,
                          val: 8,
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }, key = '', expected = {
      tree,
      children: {
        a: {
          tree,
          children: {
            l: {
              tree,
              children: {
                p: {
                  tree,
                  children: {
                    h: {
                      tree,
                      children: {
                        a: {
                          tree,
                          val: 5,
                          children: {
                            b: {
                              tree,
                              children: {
                                e: {
                                  tree,
                                  children: {
                                    t: {
                                      tree,
                                      val: 3,
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  children: {
                    p: {
                      tree,
                      children: {
                        h: {
                          tree,
                          val: 8,
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    expect(TrieNode.remove(node, key)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('remove unique empty string dne', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      children: {
        a: {
          tree,
          children: {
            l: {
              tree,
              children: {
                p: {
                  tree,
                  children: {
                    h: {
                      tree,
                      children: {
                        a: {
                          tree,
                          val: 5,
                          children: {
                            b: {
                              tree,
                              children: {
                                e: {
                                  tree,
                                  children: {
                                    t: {
                                      tree,
                                      val: 3,
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  children: {
                    p: {
                      tree,
                      children: {
                        h: {
                          tree,
                          val: 8,
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }, key = '', expected = {
      tree,
      children: {
        a: {
          tree,
          children: {
            l: {
              tree,
              children: {
                p: {
                  tree,
                  children: {
                    h: {
                      tree,
                      children: {
                        a: {
                          tree,
                          val: 5,
                          children: {
                            b: {
                              tree,
                              children: {
                                e: {
                                  tree,
                                  children: {
                                    t: {
                                      tree,
                                      val: 3,
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  children: {
                    p: {
                      tree,
                      children: {
                        h: {
                          tree,
                          val: 8,
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    expect(TrieNode.remove(node, key)).to.be.false;
    expect(node).to.deep.equal(expected);
  });
  it('remove unique internal', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      val: 9,
      children: {
        a: {
          tree,
          children: {
            l: {
              tree,
              children: {
                p: {
                  tree,
                  children: {
                    h: {
                      tree,
                      children: {
                        a: {
                          tree,
                          val: 5,
                          children: {
                            b: {
                              tree,
                              children: {
                                e: {
                                  tree,
                                  children: {
                                    t: {
                                      tree,
                                      val: 3,
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  children: {
                    p: {
                      tree,
                      children: {
                        h: {
                          tree,
                          val: 8,
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }, key = 'alpha', expected = {
      tree,
      val: 9,
      children: {
        a: {
          tree,
          children: {
            l: {
              tree,
              children: {
                p: {
                  tree,
                  children: {
                    h: {
                      tree,
                      children: {
                        a: {
                          tree,
                          children: {
                            b: {
                              tree,
                              children: {
                                e: {
                                  tree,
                                  children: {
                                    t: {
                                      tree,
                                      val: 3,
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  children: {
                    p: {
                      tree,
                      children: {
                        h: {
                          tree,
                          val: 8,
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    expect(TrieNode.remove(node, key)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('remove unique leaf', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      val: 9,
      children: {
        a: {
          tree,
          children: {
            l: {
              tree,
              children: {
                p: {
                  tree,
                  children: {
                    h: {
                      tree,
                      children: {
                        a: {
                          tree,
                          val: 5,
                          children: {
                            b: {
                              tree,
                              children: {
                                e: {
                                  tree,
                                  children: {
                                    t: {
                                      tree,
                                      val: 3,
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  children: {
                    p: {
                      tree,
                      children: {
                        h: {
                          tree,
                          val: 8,
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }, key = 'alphabet', expected = {
      tree,
      val: 9,
      children: {
        a: {
          tree,
          children: {
            l: {
              tree,
              children: {
                p: {
                  tree,
                  children: {
                    h: {
                      tree,
                      children: {
                        a: {
                          tree,
                          val: 5,
                          children: {}
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  children: {
                    p: {
                      tree,
                      children: {
                        h: {
                          tree,
                          val: 8,
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    expect(TrieNode.remove(node, key)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('remove unique internal dne', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      val: 9,
      children: {
        a: {
          tree,
          children: {
            l: {
              tree,
              children: {
                p: {
                  tree,
                  children: {
                    h: {
                      tree,
                      children: {
                        a: {
                          tree,
                          val: 5,
                          children: {
                            b: {
                              tree,
                              children: {
                                e: {
                                  tree,
                                  children: {
                                    t: {
                                      tree,
                                      val: 3,
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  children: {
                    p: {
                      tree,
                      children: {
                        h: {
                          tree,
                          val: 8,
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }, expected = {
      tree,
      val: 9,
      children: {
        a: {
          tree,
          children: {
            l: {
              tree,
              children: {
                p: {
                  tree,
                  children: {
                    h: {
                      tree,
                      children: {
                        a: {
                          tree,
                          val: 5,
                          children: {
                            b: {
                              tree,
                              children: {
                                e: {
                                  tree,
                                  children: {
                                    t: {
                                      tree,
                                      val: 3,
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  children: {
                    p: {
                      tree,
                      children: {
                        h: {
                          tree,
                          val: 8,
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    expect(TrieNode.remove(node, 'beta')).to.be.false;
    expect(TrieNode.remove(node, 'alphas')).to.be.false;
    expect(TrieNode.remove(node, 'abra')).to.be.false;
    expect(node).to.deep.equal(expected);
  });
  if(false)
  it('remove unique', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      val: 9,
      children: {
        a: {
          tree,
          children: {
            l: {
              tree,
              children: {
                p: {
                  tree,
                  children: {
                    h: {
                      tree,
                      children: {
                        a: {
                          tree,
                          val: 5,
                          children: {
                            b: {
                              tree,
                              children: {
                                e: {
                                  tree,
                                  children: {
                                    t: {
                                      tree,
                                      val: 3,
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  children: {
                    p: {
                      tree,
                      children: {
                        h: {
                          tree,
                          val: 8,
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }, key = '', expected = {
      tree,
      val: 9,
      children: {
        a: {
          tree,
          children: {
            l: {
              tree,
              children: {
                p: {
                  tree,
                  children: {
                    h: {
                      tree,
                      children: {
                        a: {
                          tree,
                          val: 5,
                          children: {
                            b: {
                              tree,
                              children: {
                                e: {
                                  tree,
                                  children: {
                                    t: {
                                      tree,
                                      val: 3,
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  children: {
                    p: {
                      tree,
                      children: {
                        h: {
                          tree,
                          val: 8,
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    expect(TrieNode.remove(node, key)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  if(false)
  it('remove nonunique', function() {
      const tree = {
        unique: false
      }, node = {
        tree,
        vals: [9, 2],
        children: {
          a: {
            tree,
            vals: [],
            children: {
              l: {
                tree,
                vals: [],
                children: {
                  p: {
                    tree,
                    vals: [],
                    children: {
                      h: {
                        tree,
                        vals: [],
                        children: {
                          a: {
                            tree,
                            vals: [5],
                            children: {
                              b: {
                                tree,
                                vals: [],
                                children: {
                                  e: {
                                    tree,
                                    vals: [],
                                    children: {
                                      t: {
                                        tree,
                                        vals: [3],
                                        children: {}
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  e: {
                    tree,
                    vals: [],
                    children: {
                      p: {
                        tree,
                        vals: [],
                        children: {
                          h: {
                            tree,
                            vals: [8],
                            children: {}
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }, key = '', expected = {
        tree,
        vals: [9, 2],
        children: {
          a: {
            tree,
            vals: [],
            children: {
              l: {
                tree,
                vals: [],
                children: {
                  p: {
                    tree,
                    vals: [],
                    children: {
                      h: {
                        tree,
                        vals: [],
                        children: {
                          a: {
                            tree,
                            vals: [5],
                            children: {
                              b: {
                                tree,
                                vals: [],
                                children: {
                                  e: {
                                    tree,
                                    vals: [],
                                    children: {
                                      t: {
                                        tree,
                                        vals: [3],
                                        children: {}
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  e: {
                    tree,
                    vals: [],
                    children: {
                      p: {
                        tree,
                        vals: [],
                        children: {
                          h: {
                            tree,
                            vals: [8],
                            children: {}
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      expect(TrieNode.remove(node, key)).to.be.true;
      expect(node).to.deep.equal(expected);
    });
  it('toJSON', function() {
    const tree = {
      unique: true,
      max: 3,
      min: 1,
      compare(a, b) {
        if(a < b) return -1;
        if(a > b) return 1;
        return 0;
      }
    };
    const node = {
      tree,
      val: 9,
      children: {
        a: {
          tree,
          children: {
            l: {
              tree,
              children: {
                p: {
                  tree,
                  children: {
                    h: {
                      tree,
                      children: {
                        a: {
                          tree,
                          val: 5,
                          children: {
                            b: {
                              tree,
                              children: {
                                e: {
                                  tree,
                                  children: {
                                    t: {
                                      tree,
                                      val: 3,
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  tree,
                  children: {
                    p: {
                      tree,
                      children: {
                        h: {
                          tree,
                          val: 8,
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    const expected = {
      val: 9,
      children: {
        a: {
          children: {
            l: {
              children: {
                p: {
                  children: {
                    h: {
                      children: {
                        a: {
                          val: 5,
                          children: {
                            b: {
                              children: {
                                e: {
                                  children: {
                                    t: {
                                      val: 3,
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  children: {
                    p: {
                      children: {
                        h: {
                          val: 8,
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    expect(TrieNode.toJSON(node,)).to.deep.equal(expected);
  });
});

describe('Trie', function() {
  var Trie;
  beforeEach(function() {
    Trie = oaStruct.get('trie');
  });
  it('is not null', function() {
    expect(Trie).to.not.be.null;
  });
  it('size unique', function() {
    let tree = new Trie(true, {
      val: 9,
      children: {
        a: {
          children: {
            l: {
              children: {
                p: {
                  children: {
                    h: {
                      children: {
                        a: {
                          val: 5,
                          children: {
                            b: {
                              children: {
                                e: {
                                  children: {
                                    t: {
                                      val: 3,
                                      children: {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                e: {
                  children: {
                    p: {
                      children: {
                        h: {
                          val: 8,
                          children: {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    });
    expect(tree.size()).to.equal(4);
  });
});

describe('RadixTreeNode', function() {
  var RadixTreeNode;
  beforeEach(function() {
    RadixTreeNode = oaStruct.get('radixTreeNode');
  });
  it('is not null', function() {
    expect(RadixTreeNode).to.not.be.null;
  });
  it('size unique', function() {
    const tree = {
      unique: true
    };
    let node = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.size(node)).to.equal(4);
  });
  it('get unique', function() {
    const tree = {
      unique: true
    };
    const node = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.at(node, '')).to.equal(9);
    expect(RadixTreeNode.at(node, 'alpha')).to.equal(5);
    expect(RadixTreeNode.at(node, 'alphabet')).to.equal(3);
    expect(RadixTreeNode.at(node, 'aleph')).to.equal(8);
    expect(RadixTreeNode.at(node, 'beta')).to.equal(undefined);
    expect(RadixTreeNode.at(node, 'alphas')).to.equal(undefined);
    expect(RadixTreeNode.at(node, 'abra')).to.equal(undefined);
  });
  it('iterators unique', function() {
    const tree = {
      unique: true
    };
    const node = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    };
    RadixTreeNode.inOrderGenerator(node).should.deep.iterate.over([
      {key: '', val: 9},
      {key: 'aleph', val: 8},
      {key: 'alpha', val: 5},
      {key: 'alphabet', val: 3}
    ]);
  });
  it('add unique empty string', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    }, key = '', val = 7, expected = {
      tree,
      val: 7,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('add unique empty string already exists', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    }, key = '', val = 7, expected = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.add(node, key, val)).to.be.false;
    expect(node).to.deep.equal(expected);
  });
  it('add unique at node', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    }, key = 'al', val = 7, expected = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          val: 7,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('add unique at node already exists', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          val: 11,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    }, key = 'al', val = 7, expected = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          val: 11,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.add(node, key, val)).to.be.false;
    expect(node).to.deep.equal(expected);
  });
  it('add unique branch node', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    }, key = 'altar', val = 7, expected = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            },
            tar: {
              tree,
              val: 7,
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('add unique branch path', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    }, key = 'alpine', val = 7, expected = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            p: {
              tree,
              children: {
                ha: {
                  tree,
                  val: 5,
                  children: {
                    bet: {
                      tree,
                      val: 3,
                      children: {}
                    }
                  }
                },
                ine: {
                  tree,
                  val: 7,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('add unique extend path', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    }, key = 'alephs', val = 7, expected = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {
                s: {
                  tree,
                  val: 7,
                  children: {}
                }
              }
            }
          }
        }
      }
    };
    expect(RadixTreeNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('add nonunique empty string', function() {
    const tree = {
      unique: false
    }, node = {
      tree,
      vals: [],
      children: {
        al: {
          tree,
          vals: [],
          children: {
            pha: {
              tree,
              vals: [5],
              children: {
                bet: {
                  tree,
                  vals: [3],
                  children: {}
                }
              }
            },
            eph: {
              tree,
              vals: [8],
              children: {}
            }
          }
        }
      }
    }, key = '', val = 7, expected = {
      tree,
      vals: [7],
      children: {
        al: {
          tree,
          vals: [],
          children: {
            pha: {
              tree,
              vals: [5],
              children: {
                bet: {
                  tree,
                  vals: [3],
                  children: {}
                }
              }
            },
            eph: {
              tree,
              vals: [8],
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('add nonunique empty string already exists', function() {
    const tree = {
      unique: false
    }, node = {
      tree,
      vals: [9, 2],
      children: {
        al: {
          tree,
          vals: [],
          children: {
            pha: {
              tree,
              vals: [5],
              children: {
                bet: {
                  tree,
                  vals: [3],
                  children: {}
                }
              }
            },
            eph: {
              tree,
              vals: [8],
              children: {}
            }
          }
        }
      }
    }, key = '', val = 7, expected = {
      tree,
      vals: [9, 2, 7],
      children: {
        al: {
          tree,
          vals: [],
          children: {
            pha: {
              tree,
              vals: [5],
              children: {
                bet: {
                  tree,
                  vals: [3],
                  children: {}
                }
              }
            },
            eph: {
              tree,
              vals: [8],
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('add nonunique at node', function() {
    const tree = {
      unique: false
    }, node = {
      tree,
      vals: [9, 2],
      children: {
        al: {
          tree,
          vals: [],
          children: {
            pha: {
              tree,
              vals: [5],
              children: {
                bet: {
                  tree,
                  vals: [3],
                  children: {}
                }
              }
            },
            eph: {
              tree,
              vals: [8],
              children: {}
            }
          }
        }
      }
    }, key = 'al', val = 7, expected = {
      tree,
      vals: [9, 2],
      children: {
        al: {
          tree,
          vals: [7],
          children: {
            pha: {
              tree,
              vals: [5],
              children: {
                bet: {
                  tree,
                  vals: [3],
                  children: {}
                }
              }
            },
            eph: {
              tree,
              vals: [8],
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('add nonunique at node already exists', function() {
    const tree = {
      unique: false
    }, node = {
      tree,
      vals: [9, 2],
      children: {
        al: {
          tree,
          vals: [11],
          children: {
            pha: {
              tree,
              vals: [5],
              children: {
                bet: {
                  tree,
                  vals: [3],
                  children: {}
                }
              }
            },
            eph: {
              tree,
              vals: [8],
              children: {}
            }
          }
        }
      }
    }, key = 'al', val = 7, expected = {
      tree,
      vals: [9, 2],
      children: {
        al: {
          tree,
          vals: [11, 7],
          children: {
            pha: {
              tree,
              vals: [5],
              children: {
                bet: {
                  tree,
                  vals: [3],
                  children: {}
                }
              }
            },
            eph: {
              tree,
              vals: [8],
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('add nonunique branch node', function() {
    const tree = {
      unique: false
    }, node = {
      tree,
      vals: [9, 2],
      children: {
        al: {
          tree,
          vals: [],
          children: {
            pha: {
              tree,
              vals: [5],
              children: {
                bet: {
                  tree,
                  vals: [3],
                  children: {}
                }
              }
            },
            eph: {
              tree,
              vals: [8],
              children: {}
            }
          }
        }
      }
    }, key = 'altar', val = 7, expected = {
      tree,
      vals: [9, 2],
      children: {
        al: {
          tree,
          vals: [],
          children: {
            pha: {
              tree,
              vals: [5],
              children: {
                bet: {
                  tree,
                  vals: [3],
                  children: {}
                }
              }
            },
            eph: {
              tree,
              vals: [8],
              children: {}
            },
            tar: {
              tree,
              vals: [7],
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('add nonunique branch path', function() {
    const tree = {
      unique: false
    }, node = {
      tree,
      vals: [9, 2],
      children: {
        al: {
          tree,
          vals: [],
          children: {
            pha: {
              tree,
              vals: [5],
              children: {
                bet: {
                  tree,
                  vals: [3],
                  children: {}
                }
              }
            },
            eph: {
              tree,
              vals: [8],
              children: {}
            }
          }
        }
      }
    }, key = 'alpine', val = 7, expected = {
      tree,
      vals: [9, 2],
      children: {
        al: {
          tree,
          vals: [],
          children: {
            p: {
              tree,
              vals: [],
              children: {
                ha: {
                  tree,
                  vals: [5],
                  children: {
                    bet: {
                      tree,
                      vals: [3],
                      children: {}
                    }
                  }
                },
                ine: {
                  tree,
                  vals: [7],
                  children: {}
                }
              }
            },
            eph: {
              tree,
              vals: [8],
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('add nonunique extend path', function() {
    const tree = {
      unique: false
    }, node = {
      tree,
      vals: [9, 2],
      children: {
        al: {
          tree,
          vals: [],
          children: {
            pha: {
              tree,
              vals: [5],
              children: {
                bet: {
                  tree,
                  vals: [3],
                  children: {}
                }
              }
            },
            eph: {
              tree,
              vals: [8],
              children: {}
            }
          }
        }
      }
    }, key = 'alephs', val = 7, expected = {
      tree,
      vals: [9, 2],
      children: {
        al: {
          tree,
          vals: [],
          children: {
            pha: {
              tree,
              vals: [5],
              children: {
                bet: {
                  tree,
                  vals: [3],
                  children: {}
                }
              }
            },
            eph: {
              tree,
              vals: [8],
              children: {
                s: {
                  tree,
                  vals: [7],
                  children: {}
                }
              }
            }
          }
        }
      }
    };
    expect(RadixTreeNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  if(false)
  it('add unique', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    }, key = '', val = 7, expected = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  if(false)
  it('add nonunique', function() {
    const tree = {
      unique: false
    }, node = {
      tree,
      vals: [9, 2],
      children: {
        al: {
          tree,
          vals: [],
          children: {
            pha: {
              tree,
              vals: [5],
              children: {
                bet: {
                  tree,
                  vals: [3],
                  children: {}
                }
              }
            },
            eph: {
              tree,
              vals: [8],
              children: {}
            }
          }
        }
      }
    }, key = '', val = 7, expected = {
      tree,
      vals: [9, 2],
      children: {
        al: {
          tree,
          vals: [],
          children: {
            pha: {
              tree,
              vals: [5],
              children: {
                bet: {
                  tree,
                  vals: [3],
                  children: {}
                }
              }
            },
            eph: {
              tree,
              vals: [8],
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('remove unique empty string', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    }, key = '', expected = {
      tree,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.remove(node, key)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('remove unique empty string dne', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    }, key = '', expected = {
      tree,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.remove(node, key)).to.be.false;
    expect(node).to.deep.equal(expected);
  });
  it('remove unique internal', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    }, key = 'alpha', expected = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.remove(node, key)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('remove unique leaf', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    }, key = 'alphabet', expected = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {}
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.remove(node, key)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('remove unique internal dne', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    }, expected = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.remove(node, 'beta')).to.be.false;
    expect(RadixTreeNode.remove(node, 'alphas')).to.be.false;
    expect(RadixTreeNode.remove(node, 'abra')).to.be.false;
    expect(node).to.deep.equal(expected);
  });
  if(false)
  it('remove unique', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    }, key = '', expected = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.remove(node, key)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  if(false)
  it('remove nonunique', function() {
    const tree = {
      unique: false
    }, node = {
      tree,
      vals: [9, 2],
      children: {
        al: {
          tree,
          vals: [],
          children: {
            pha: {
              tree,
              vals: [5],
              children: {
                bet: {
                  tree,
                  vals: [3],
                  children: {}
                }
              }
            },
            eph: {
              tree,
              vals: [8],
              children: {}
            }
          }
        }
      }
    }, key = '', expected = {
      tree,
      vals: [9, 2],
      children: {
        al: {
          tree,
          vals: [],
          children: {
            pha: {
              tree,
              vals: [5],
              children: {
                bet: {
                  tree,
                  vals: [3],
                  children: {}
                }
              }
            },
            eph: {
              tree,
              vals: [8],
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.remove(node, key)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('toJSON', function() {
    const tree = {
      unique: true,
      max: 3,
      min: 1,
      compare(a, b) {
        if(a < b) return -1;
        if(a > b) return 1;
        return 0;
      }
    };
    const node = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    };
    const expected = {
      val: 9,
      children: {
        al: {
          children: {
            pha: {
              val: 5,
              children: {
                bet: {
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              val: 8,
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.toJSON(node,)).to.deep.equal(expected);
  });
});

describe('RadixTree', function() {
  var RadixTree;
  beforeEach(function() {
    RadixTree = oaStruct.get('radixTree');
  });
  it('is not null', function() {
    expect(RadixTree).to.not.be.null;
  });
  it('size unique', function() {
    let tree = new RadixTree(true, {
      val: 9,
      children: {
        al: {
          children: {
            pha: {
              val: 5,
              children: {
                bet: {
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              val: 8,
              children: {}
            }
          }
        }
      }
    });
    expect(tree.size()).to.equal(4);
  });
  return;
  it('get unique', function() {
    const tree = {
      unique: true
    };
    const node = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.at(node, '')).to.equal(9);
    expect(RadixTreeNode.at(node, 'alpha')).to.equal(5);
    expect(RadixTreeNode.at(node, 'alphabet')).to.equal(3);
    expect(RadixTreeNode.at(node, 'aleph')).to.equal(8);
    expect(RadixTreeNode.at(node, 'beta')).to.equal(undefined);
    expect(RadixTreeNode.at(node, 'alphas')).to.equal(undefined);
    expect(RadixTreeNode.at(node, 'abra')).to.equal(undefined);
  });
  it('iterators unique', function() {
    const tree = {
      unique: true
    };
    const node = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    };
    RadixTreeNode.inOrderGenerator(node).should.deep.iterate.over([
      {key: '', val: 9},
      {key: 'aleph', val: 8},
      {key: 'alpha', val: 5},
      {key: 'alphabet', val: 3}
    ]);
  });
  it('add unique empty string', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    }, key = '', val = 7, expected = {
      tree,
      val: 7,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('add unique empty string already exists', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    }, key = '', val = 7, expected = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.add(node, key, val)).to.be.false;
    expect(node).to.deep.equal(expected);
  });
  it('add unique at node', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    }, key = 'al', val = 7, expected = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          val: 7,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('add unique at node already exists', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          val: 11,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    }, key = 'al', val = 7, expected = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          val: 11,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.add(node, key, val)).to.be.false;
    expect(node).to.deep.equal(expected);
  });
  it('add unique branch node', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    }, key = 'altar', val = 7, expected = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            },
            tar: {
              tree,
              val: 7,
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('add unique branch path', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    }, key = 'alpine', val = 7, expected = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            p: {
              tree,
              children: {
                ha: {
                  tree,
                  val: 5,
                  children: {
                    bet: {
                      tree,
                      val: 3,
                      children: {}
                    }
                  }
                },
                ine: {
                  tree,
                  val: 7,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('add unique extend path', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    }, key = 'alephs', val = 7, expected = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {
                s: {
                  tree,
                  val: 7,
                  children: {}
                }
              }
            }
          }
        }
      }
    };
    expect(RadixTreeNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('add nonunique empty string', function() {
    const tree = {
      unique: false
    }, node = {
      tree,
      vals: [],
      children: {
        al: {
          tree,
          vals: [],
          children: {
            pha: {
              tree,
              vals: [5],
              children: {
                bet: {
                  tree,
                  vals: [3],
                  children: {}
                }
              }
            },
            eph: {
              tree,
              vals: [8],
              children: {}
            }
          }
        }
      }
    }, key = '', val = 7, expected = {
      tree,
      vals: [7],
      children: {
        al: {
          tree,
          vals: [],
          children: {
            pha: {
              tree,
              vals: [5],
              children: {
                bet: {
                  tree,
                  vals: [3],
                  children: {}
                }
              }
            },
            eph: {
              tree,
              vals: [8],
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('add nonunique empty string already exists', function() {
    const tree = {
      unique: false
    }, node = {
      tree,
      vals: [9, 2],
      children: {
        al: {
          tree,
          vals: [],
          children: {
            pha: {
              tree,
              vals: [5],
              children: {
                bet: {
                  tree,
                  vals: [3],
                  children: {}
                }
              }
            },
            eph: {
              tree,
              vals: [8],
              children: {}
            }
          }
        }
      }
    }, key = '', val = 7, expected = {
      tree,
      vals: [9, 2, 7],
      children: {
        al: {
          tree,
          vals: [],
          children: {
            pha: {
              tree,
              vals: [5],
              children: {
                bet: {
                  tree,
                  vals: [3],
                  children: {}
                }
              }
            },
            eph: {
              tree,
              vals: [8],
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('add nonunique at node', function() {
    const tree = {
      unique: false
    }, node = {
      tree,
      vals: [9, 2],
      children: {
        al: {
          tree,
          vals: [],
          children: {
            pha: {
              tree,
              vals: [5],
              children: {
                bet: {
                  tree,
                  vals: [3],
                  children: {}
                }
              }
            },
            eph: {
              tree,
              vals: [8],
              children: {}
            }
          }
        }
      }
    }, key = 'al', val = 7, expected = {
      tree,
      vals: [9, 2],
      children: {
        al: {
          tree,
          vals: [7],
          children: {
            pha: {
              tree,
              vals: [5],
              children: {
                bet: {
                  tree,
                  vals: [3],
                  children: {}
                }
              }
            },
            eph: {
              tree,
              vals: [8],
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('add nonunique at node already exists', function() {
    const tree = {
      unique: false
    }, node = {
      tree,
      vals: [9, 2],
      children: {
        al: {
          tree,
          vals: [11],
          children: {
            pha: {
              tree,
              vals: [5],
              children: {
                bet: {
                  tree,
                  vals: [3],
                  children: {}
                }
              }
            },
            eph: {
              tree,
              vals: [8],
              children: {}
            }
          }
        }
      }
    }, key = 'al', val = 7, expected = {
      tree,
      vals: [9, 2],
      children: {
        al: {
          tree,
          vals: [11, 7],
          children: {
            pha: {
              tree,
              vals: [5],
              children: {
                bet: {
                  tree,
                  vals: [3],
                  children: {}
                }
              }
            },
            eph: {
              tree,
              vals: [8],
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('add nonunique branch node', function() {
    const tree = {
      unique: false
    }, node = {
      tree,
      vals: [9, 2],
      children: {
        al: {
          tree,
          vals: [],
          children: {
            pha: {
              tree,
              vals: [5],
              children: {
                bet: {
                  tree,
                  vals: [3],
                  children: {}
                }
              }
            },
            eph: {
              tree,
              vals: [8],
              children: {}
            }
          }
        }
      }
    }, key = 'altar', val = 7, expected = {
      tree,
      vals: [9, 2],
      children: {
        al: {
          tree,
          vals: [],
          children: {
            pha: {
              tree,
              vals: [5],
              children: {
                bet: {
                  tree,
                  vals: [3],
                  children: {}
                }
              }
            },
            eph: {
              tree,
              vals: [8],
              children: {}
            },
            tar: {
              tree,
              vals: [7],
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('add nonunique branch path', function() {
    const tree = {
      unique: false
    }, node = {
      tree,
      vals: [9, 2],
      children: {
        al: {
          tree,
          vals: [],
          children: {
            pha: {
              tree,
              vals: [5],
              children: {
                bet: {
                  tree,
                  vals: [3],
                  children: {}
                }
              }
            },
            eph: {
              tree,
              vals: [8],
              children: {}
            }
          }
        }
      }
    }, key = 'alpine', val = 7, expected = {
      tree,
      vals: [9, 2],
      children: {
        al: {
          tree,
          vals: [],
          children: {
            p: {
              tree,
              vals: [],
              children: {
                ha: {
                  tree,
                  vals: [5],
                  children: {
                    bet: {
                      tree,
                      vals: [3],
                      children: {}
                    }
                  }
                },
                ine: {
                  tree,
                  vals: [7],
                  children: {}
                }
              }
            },
            eph: {
              tree,
              vals: [8],
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('add nonunique extend path', function() {
    const tree = {
      unique: false
    }, node = {
      tree,
      vals: [9, 2],
      children: {
        al: {
          tree,
          vals: [],
          children: {
            pha: {
              tree,
              vals: [5],
              children: {
                bet: {
                  tree,
                  vals: [3],
                  children: {}
                }
              }
            },
            eph: {
              tree,
              vals: [8],
              children: {}
            }
          }
        }
      }
    }, key = 'alephs', val = 7, expected = {
      tree,
      vals: [9, 2],
      children: {
        al: {
          tree,
          vals: [],
          children: {
            pha: {
              tree,
              vals: [5],
              children: {
                bet: {
                  tree,
                  vals: [3],
                  children: {}
                }
              }
            },
            eph: {
              tree,
              vals: [8],
              children: {
                s: {
                  tree,
                  vals: [7],
                  children: {}
                }
              }
            }
          }
        }
      }
    };
    expect(RadixTreeNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  if(false)
  it('add unique', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    }, key = '', val = 7, expected = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  if(false)
  it('add nonunique', function() {
    const tree = {
      unique: false
    }, node = {
      tree,
      vals: [9, 2],
      children: {
        al: {
          tree,
          vals: [],
          children: {
            pha: {
              tree,
              vals: [5],
              children: {
                bet: {
                  tree,
                  vals: [3],
                  children: {}
                }
              }
            },
            eph: {
              tree,
              vals: [8],
              children: {}
            }
          }
        }
      }
    }, key = '', val = 7, expected = {
      tree,
      vals: [9, 2],
      children: {
        al: {
          tree,
          vals: [],
          children: {
            pha: {
              tree,
              vals: [5],
              children: {
                bet: {
                  tree,
                  vals: [3],
                  children: {}
                }
              }
            },
            eph: {
              tree,
              vals: [8],
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.add(node, key, val)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('remove unique empty string', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    }, key = '', expected = {
      tree,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.remove(node, key)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('remove unique empty string dne', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    }, key = '', expected = {
      tree,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.remove(node, key)).to.be.false;
    expect(node).to.deep.equal(expected);
  });
  it('remove unique internal', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    }, key = 'alpha', expected = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.remove(node, key)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('remove unique leaf', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    }, key = 'alphabet', expected = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {}
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.remove(node, key)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('remove unique internal dne', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    }, expected = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.remove(node, 'beta')).to.be.false;
    expect(RadixTreeNode.remove(node, 'alphas')).to.be.false;
    expect(RadixTreeNode.remove(node, 'abra')).to.be.false;
    expect(node).to.deep.equal(expected);
  });
  if(false)
  it('remove unique', function() {
    const tree = {
      unique: true
    }, node = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    }, key = '', expected = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.remove(node, key)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  if(false)
  it('remove nonunique', function() {
    const tree = {
      unique: false
    }, node = {
      tree,
      vals: [9, 2],
      children: {
        al: {
          tree,
          vals: [],
          children: {
            pha: {
              tree,
              vals: [5],
              children: {
                bet: {
                  tree,
                  vals: [3],
                  children: {}
                }
              }
            },
            eph: {
              tree,
              vals: [8],
              children: {}
            }
          }
        }
      }
    }, key = '', expected = {
      tree,
      vals: [9, 2],
      children: {
        al: {
          tree,
          vals: [],
          children: {
            pha: {
              tree,
              vals: [5],
              children: {
                bet: {
                  tree,
                  vals: [3],
                  children: {}
                }
              }
            },
            eph: {
              tree,
              vals: [8],
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.remove(node, key)).to.be.true;
    expect(node).to.deep.equal(expected);
  });
  it('toJSON', function() {
    const tree = {
      unique: true,
      max: 3,
      min: 1,
      compare(a, b) {
        if(a < b) return -1;
        if(a > b) return 1;
        return 0;
      }
    };
    const node = {
      tree,
      val: 9,
      children: {
        al: {
          tree,
          children: {
            pha: {
              tree,
              val: 5,
              children: {
                bet: {
                  tree,
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              tree,
              val: 8,
              children: {}
            }
          }
        }
      }
    };
    const expected = {
      val: 9,
      children: {
        al: {
          children: {
            pha: {
              val: 5,
              children: {
                bet: {
                  val: 3,
                  children: {}
                }
              }
            },
            eph: {
              val: 8,
              children: {}
            }
          }
        }
      }
    };
    expect(RadixTreeNode.toJSON(node,)).to.deep.equal(expected);
  });
});

});
